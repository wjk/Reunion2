// Copyright (c) William Kent. All rights reserved.

namespace Sunburst.Reunion2.CppWinRT.BuildTasks;

using Task = Microsoft.Build.Utilities.Task;

#pragma warning disable SA1600

public sealed class CreateXamlMetadataProviderCppFile : Task
{
    [Required]
    public string? OutputFile { get; set; }

    public string[] PrecompiledHeader { get; set; } = Array.Empty<string>();

    public bool WriteOnlyWhenDifferent { get; set; } = false;

    /// <inheritdoc/>
    public override bool Execute()
    {
        if (OutputFile is null)
        {
            Log.LogError("No OutputFile provided");
            return false;
        }

        StringBuilder output = new();
        output.AppendLine("// This file is generated by the build to support Xaml apps.");
        output.AppendLine();

        if (PrecompiledHeader.Length > 0)
        {
            if (PrecompiledHeader.Length > 1)
            {
                Log.LogError("There cannot be more than one precompiled header in the project");
                return false;
            }

            output.AppendLine($"#include \"{PrecompiledHeader[0]}\"");
            output.AppendLine();
        }

        output.AppendLine("#include \"XamlMetaDataProvider.h\"");
        output.AppendLine("#include \"XamlMetaDataProvider.g.cpp\"");

        string newContents = output.ToString();

        if (WriteOnlyWhenDifferent)
        {
            if (File.Exists(OutputFile))
            {
                string oldContents = File.ReadAllText(OutputFile);
                if (oldContents.Length == newContents.Length)
                {
                    if (oldContents == newContents)
                    {
                        Log.LogMessage(MessageImportance.Low, "Not overwriting unchanged file {0}", OutputFile);
                        return true;
                    }
                }
            }
        }

        File.WriteAllText(OutputFile, newContents);
        return true;
    }
}
